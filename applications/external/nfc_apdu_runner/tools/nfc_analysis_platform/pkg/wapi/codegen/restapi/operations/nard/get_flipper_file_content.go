// Code generated by go-swagger; DO NOT EDIT.

package nard

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetFlipperFileContentHandlerFunc turns a function with the right signature into a get flipper file content handler
type GetFlipperFileContentHandlerFunc func(GetFlipperFileContentParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetFlipperFileContentHandlerFunc) Handle(params GetFlipperFileContentParams) middleware.Responder {
	return fn(params)
}

// GetFlipperFileContentHandler interface for that can handle valid get flipper file content params
type GetFlipperFileContentHandler interface {
	Handle(GetFlipperFileContentParams) middleware.Responder
}

// NewGetFlipperFileContent creates a new http.Handler for the get flipper file content operation
func NewGetFlipperFileContent(ctx *middleware.Context, handler GetFlipperFileContentHandler) *GetFlipperFileContent {
	return &GetFlipperFileContent{Context: ctx, Handler: handler}
}

/*
	GetFlipperFileContent swagger:route GET /nard/flipper/files/{file_id} nard getFlipperFileContent

# Get content of .apdures file from Flipper Zero

Returns the content of a specific .apdures file from Flipper Zero device
*/
type GetFlipperFileContent struct {
	Context *middleware.Context
	Handler GetFlipperFileContentHandler
}

func (o *GetFlipperFileContent) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetFlipperFileContentParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
