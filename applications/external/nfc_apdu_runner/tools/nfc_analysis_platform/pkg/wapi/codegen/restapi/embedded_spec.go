// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "API for NFC Analysis Platform",
    "title": "NFC Analysis Platform API",
    "contact": {
      "name": "SpenserCai",
      "url": "https://github.com/spensercai"
    },
    "license": {
      "name": "GNU Affero General Public License v3.0",
      "url": "https://www.gnu.org/licenses/agpl-3.0.en.html"
    },
    "version": "1.0.0"
  },
  "basePath": "/api",
  "paths": {
    "/nard/decode": {
      "post": {
        "description": "Decodes APDU response data using a format template",
        "tags": [
          "nard"
        ],
        "summary": "Decode APDU response",
        "operationId": "decodeApduResponse",
        "parameters": [
          {
            "description": "Decode request",
            "name": "decode_request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DecodeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/nard/flipper/devices": {
      "get": {
        "description": "Returns a list of available Flipper Zero devices",
        "tags": [
          "nard"
        ],
        "summary": "Get available Flipper Zero devices",
        "operationId": "getFlipperDevices",
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/nard/flipper/files": {
      "get": {
        "description": "Returns a list of available .apdures files from Flipper Zero device",
        "tags": [
          "nard"
        ],
        "summary": "Get available .apdures files from Flipper Zero",
        "operationId": "getFlipperFiles",
        "parameters": [
          {
            "type": "string",
            "description": "Path to the Flipper Zero device",
            "name": "device_path",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Serial port for Flipper Zero communication",
            "name": "serial_port",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Whether to use serial communication",
            "name": "use_serial",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/nard/flipper/files/{file_id}": {
      "get": {
        "description": "Returns the content of a specific .apdures file from Flipper Zero device",
        "tags": [
          "nard"
        ],
        "summary": "Get content of .apdures file from Flipper Zero",
        "operationId": "getFlipperFileContent",
        "parameters": [
          {
            "type": "string",
            "description": "ID of the .apdures file",
            "name": "file_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Path to the Flipper Zero device",
            "name": "device_path",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Serial port for Flipper Zero communication",
            "name": "serial_port",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Whether to use serial communication",
            "name": "use_serial",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/nard/formats": {
      "get": {
        "description": "Returns a list of available .apdufmt format templates",
        "tags": [
          "nard"
        ],
        "summary": "Get available format templates",
        "operationId": "getFormatTemplates",
        "parameters": [
          {
            "type": "string",
            "description": "Custom directory to search for format templates",
            "name": "directory",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/nard/formats/{format_id}": {
      "get": {
        "description": "Returns the content of a specific format template",
        "tags": [
          "nard"
        ],
        "summary": "Get format template content",
        "operationId": "getFormatTemplateContent",
        "parameters": [
          {
            "type": "string",
            "description": "ID of the format template",
            "name": "format_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Custom directory to search for format templates",
            "name": "directory",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/system/info": {
      "get": {
        "description": "Returns information about the NFC Analysis Platform",
        "tags": [
          "system"
        ],
        "summary": "Get system information",
        "operationId": "getSystemInfo",
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/tlv/extract": {
      "post": {
        "description": "Extracts values for specified tags from TLV data",
        "tags": [
          "tlv"
        ],
        "summary": "Extract values from TLV data",
        "operationId": "extractTlvValues",
        "parameters": [
          {
            "description": "Extract request",
            "name": "extract_request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TlvExtractRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/tlv/parse": {
      "post": {
        "description": "Parses TLV data and returns the structure",
        "tags": [
          "tlv"
        ],
        "summary": "Parse TLV data",
        "operationId": "parseTlvData",
        "parameters": [
          {
            "description": "Parse request",
            "name": "parse_request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TlvParseRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "ApduResContent": {
      "type": "object",
      "properties": {
        "content": {
          "description": "Content of the .apdures file",
          "type": "string"
        },
        "id": {
          "description": "ID of the .apdures file",
          "type": "string"
        },
        "name": {
          "description": "Name of the .apdures file",
          "type": "string"
        }
      }
    },
    "ApduResFile": {
      "type": "object",
      "properties": {
        "id": {
          "description": "ID of the .apdures file",
          "type": "string"
        },
        "mod_time": {
          "description": "Modification time of the .apdures file",
          "type": "string",
          "format": "date-time"
        },
        "name": {
          "description": "Name of the .apdures file",
          "type": "string"
        },
        "path": {
          "description": "Path to the .apdures file",
          "type": "string"
        },
        "size": {
          "description": "Size of the .apdures file in bytes",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ApiResponse": {
      "type": "object",
      "properties": {
        "code": {
          "description": "Response code, 0 for success, non-zero for errors",
          "type": "integer",
          "format": "int32",
          "x-omitempty": false
        },
        "data": {
          "description": "Response data, contains the actual response data or empty object for errors",
          "type": "object"
        },
        "message": {
          "description": "Response message, \"success\" for successful operations, error message for failures",
          "type": "string"
        }
      }
    },
    "DecodeRequest": {
      "type": "object",
      "required": [
        "response_data"
      ],
      "properties": {
        "debug": {
          "description": "Whether to enable debug mode",
          "type": "boolean",
          "default": false
        },
        "format_content": {
          "description": "Content of the format template to use (alternative to format_id)",
          "type": "string"
        },
        "format_id": {
          "description": "ID of the format template to use",
          "type": "string"
        },
        "response_data": {
          "description": "APDU response data to decode",
          "type": "string"
        }
      }
    },
    "DecodeResult": {
      "type": "object",
      "properties": {
        "errors": {
          "description": "Errors encountered during decoding (only in debug mode)",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "output": {
          "description": "Decoded output",
          "type": "string"
        },
        "status": {
          "description": "Status of the APDU response",
          "type": "string"
        }
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "code": {
          "description": "Error code",
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "description": "Error message",
          "type": "string"
        }
      }
    },
    "FlipperDevice": {
      "type": "object",
      "properties": {
        "id": {
          "description": "ID of the Flipper Zero device",
          "type": "string"
        },
        "is_serial": {
          "description": "Whether the device is connected via serial",
          "type": "boolean"
        },
        "path": {
          "description": "Path to the Flipper Zero device",
          "type": "string"
        },
        "serial_port": {
          "description": "Serial port for the Flipper Zero device",
          "type": "string"
        }
      }
    },
    "FormatTemplate": {
      "type": "object",
      "properties": {
        "description": {
          "description": "Description of the format template",
          "type": "string"
        },
        "id": {
          "description": "ID of the format template",
          "type": "string"
        },
        "name": {
          "description": "Name of the format template",
          "type": "string"
        },
        "path": {
          "description": "Path to the format template file",
          "type": "string"
        }
      }
    },
    "FormatTemplateContent": {
      "type": "object",
      "properties": {
        "content": {
          "description": "Content of the format template",
          "type": "string"
        },
        "id": {
          "description": "ID of the format template",
          "type": "string"
        },
        "name": {
          "description": "Name of the format template",
          "type": "string"
        }
      }
    },
    "SystemInfo": {
      "type": "object",
      "properties": {
        "arch": {
          "description": "Architecture",
          "type": "string"
        },
        "build_date": {
          "description": "Build date of the NFC Analysis Platform",
          "type": "string",
          "format": "date-time"
        },
        "go_version": {
          "description": "Go version used to build the NFC Analysis Platform",
          "type": "string"
        },
        "os": {
          "description": "Operating system",
          "type": "string"
        },
        "version": {
          "description": "Version of the NFC Analysis Platform",
          "type": "string"
        }
      }
    },
    "TlvExtractRequest": {
      "type": "object",
      "required": [
        "hex_data"
      ],
      "properties": {
        "data_type": {
          "description": "Data type for display",
          "type": "string",
          "default": "hex",
          "enum": [
            "hex",
            "utf8",
            "ascii",
            "numeric"
          ]
        },
        "hex_data": {
          "description": "Hex TLV data to parse",
          "type": "string"
        },
        "tags": {
          "description": "Tags to extract",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "TlvExtractResult": {
      "type": "object",
      "properties": {
        "values": {
          "description": "Extracted values (tag -\u003e value)",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "TlvItem": {
      "type": "object",
      "properties": {
        "children": {
          "description": "Child TLV items (if constructed)",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TlvItem"
          }
        },
        "is_constructed": {
          "description": "Whether the tag is constructed",
          "type": "boolean"
        },
        "length": {
          "description": "Length",
          "type": "integer"
        },
        "tag": {
          "description": "Tag",
          "type": "string"
        },
        "value": {
          "description": "Value (hex encoded)",
          "type": "string"
        }
      }
    },
    "TlvParseRequest": {
      "type": "object",
      "required": [
        "hex_data"
      ],
      "properties": {
        "hex_data": {
          "description": "Hex TLV data to parse",
          "type": "string"
        }
      }
    },
    "TlvParseResult": {
      "type": "object",
      "properties": {
        "structure": {
          "description": "Parsed TLV structure",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TlvItem"
          }
        }
      }
    }
  },
  "tags": [
    {
      "description": "APDU Response Decoder operations",
      "name": "nard"
    },
    {
      "description": "TLV Parser operations",
      "name": "tlv"
    },
    {
      "description": "System operations",
      "name": "system"
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "API for NFC Analysis Platform",
    "title": "NFC Analysis Platform API",
    "contact": {
      "name": "SpenserCai",
      "url": "https://github.com/spensercai"
    },
    "license": {
      "name": "GNU Affero General Public License v3.0",
      "url": "https://www.gnu.org/licenses/agpl-3.0.en.html"
    },
    "version": "1.0.0"
  },
  "basePath": "/api",
  "paths": {
    "/nard/decode": {
      "post": {
        "description": "Decodes APDU response data using a format template",
        "tags": [
          "nard"
        ],
        "summary": "Decode APDU response",
        "operationId": "decodeApduResponse",
        "parameters": [
          {
            "description": "Decode request",
            "name": "decode_request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DecodeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/nard/flipper/devices": {
      "get": {
        "description": "Returns a list of available Flipper Zero devices",
        "tags": [
          "nard"
        ],
        "summary": "Get available Flipper Zero devices",
        "operationId": "getFlipperDevices",
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/nard/flipper/files": {
      "get": {
        "description": "Returns a list of available .apdures files from Flipper Zero device",
        "tags": [
          "nard"
        ],
        "summary": "Get available .apdures files from Flipper Zero",
        "operationId": "getFlipperFiles",
        "parameters": [
          {
            "type": "string",
            "description": "Path to the Flipper Zero device",
            "name": "device_path",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Serial port for Flipper Zero communication",
            "name": "serial_port",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Whether to use serial communication",
            "name": "use_serial",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/nard/flipper/files/{file_id}": {
      "get": {
        "description": "Returns the content of a specific .apdures file from Flipper Zero device",
        "tags": [
          "nard"
        ],
        "summary": "Get content of .apdures file from Flipper Zero",
        "operationId": "getFlipperFileContent",
        "parameters": [
          {
            "type": "string",
            "description": "ID of the .apdures file",
            "name": "file_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Path to the Flipper Zero device",
            "name": "device_path",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Serial port for Flipper Zero communication",
            "name": "serial_port",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Whether to use serial communication",
            "name": "use_serial",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/nard/formats": {
      "get": {
        "description": "Returns a list of available .apdufmt format templates",
        "tags": [
          "nard"
        ],
        "summary": "Get available format templates",
        "operationId": "getFormatTemplates",
        "parameters": [
          {
            "type": "string",
            "description": "Custom directory to search for format templates",
            "name": "directory",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/nard/formats/{format_id}": {
      "get": {
        "description": "Returns the content of a specific format template",
        "tags": [
          "nard"
        ],
        "summary": "Get format template content",
        "operationId": "getFormatTemplateContent",
        "parameters": [
          {
            "type": "string",
            "description": "ID of the format template",
            "name": "format_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Custom directory to search for format templates",
            "name": "directory",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/system/info": {
      "get": {
        "description": "Returns information about the NFC Analysis Platform",
        "tags": [
          "system"
        ],
        "summary": "Get system information",
        "operationId": "getSystemInfo",
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/tlv/extract": {
      "post": {
        "description": "Extracts values for specified tags from TLV data",
        "tags": [
          "tlv"
        ],
        "summary": "Extract values from TLV data",
        "operationId": "extractTlvValues",
        "parameters": [
          {
            "description": "Extract request",
            "name": "extract_request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TlvExtractRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/tlv/parse": {
      "post": {
        "description": "Parses TLV data and returns the structure",
        "tags": [
          "tlv"
        ],
        "summary": "Parse TLV data",
        "operationId": "parseTlvData",
        "parameters": [
          {
            "description": "Parse request",
            "name": "parse_request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TlvParseRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "ApduResContent": {
      "type": "object",
      "properties": {
        "content": {
          "description": "Content of the .apdures file",
          "type": "string"
        },
        "id": {
          "description": "ID of the .apdures file",
          "type": "string"
        },
        "name": {
          "description": "Name of the .apdures file",
          "type": "string"
        }
      }
    },
    "ApduResFile": {
      "type": "object",
      "properties": {
        "id": {
          "description": "ID of the .apdures file",
          "type": "string"
        },
        "mod_time": {
          "description": "Modification time of the .apdures file",
          "type": "string",
          "format": "date-time"
        },
        "name": {
          "description": "Name of the .apdures file",
          "type": "string"
        },
        "path": {
          "description": "Path to the .apdures file",
          "type": "string"
        },
        "size": {
          "description": "Size of the .apdures file in bytes",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ApiResponse": {
      "type": "object",
      "properties": {
        "code": {
          "description": "Response code, 0 for success, non-zero for errors",
          "type": "integer",
          "format": "int32",
          "x-omitempty": false
        },
        "data": {
          "description": "Response data, contains the actual response data or empty object for errors",
          "type": "object"
        },
        "message": {
          "description": "Response message, \"success\" for successful operations, error message for failures",
          "type": "string"
        }
      }
    },
    "DecodeRequest": {
      "type": "object",
      "required": [
        "response_data"
      ],
      "properties": {
        "debug": {
          "description": "Whether to enable debug mode",
          "type": "boolean",
          "default": false
        },
        "format_content": {
          "description": "Content of the format template to use (alternative to format_id)",
          "type": "string"
        },
        "format_id": {
          "description": "ID of the format template to use",
          "type": "string"
        },
        "response_data": {
          "description": "APDU response data to decode",
          "type": "string"
        }
      }
    },
    "DecodeResult": {
      "type": "object",
      "properties": {
        "errors": {
          "description": "Errors encountered during decoding (only in debug mode)",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "output": {
          "description": "Decoded output",
          "type": "string"
        },
        "status": {
          "description": "Status of the APDU response",
          "type": "string"
        }
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "code": {
          "description": "Error code",
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "description": "Error message",
          "type": "string"
        }
      }
    },
    "FlipperDevice": {
      "type": "object",
      "properties": {
        "id": {
          "description": "ID of the Flipper Zero device",
          "type": "string"
        },
        "is_serial": {
          "description": "Whether the device is connected via serial",
          "type": "boolean"
        },
        "path": {
          "description": "Path to the Flipper Zero device",
          "type": "string"
        },
        "serial_port": {
          "description": "Serial port for the Flipper Zero device",
          "type": "string"
        }
      }
    },
    "FormatTemplate": {
      "type": "object",
      "properties": {
        "description": {
          "description": "Description of the format template",
          "type": "string"
        },
        "id": {
          "description": "ID of the format template",
          "type": "string"
        },
        "name": {
          "description": "Name of the format template",
          "type": "string"
        },
        "path": {
          "description": "Path to the format template file",
          "type": "string"
        }
      }
    },
    "FormatTemplateContent": {
      "type": "object",
      "properties": {
        "content": {
          "description": "Content of the format template",
          "type": "string"
        },
        "id": {
          "description": "ID of the format template",
          "type": "string"
        },
        "name": {
          "description": "Name of the format template",
          "type": "string"
        }
      }
    },
    "SystemInfo": {
      "type": "object",
      "properties": {
        "arch": {
          "description": "Architecture",
          "type": "string"
        },
        "build_date": {
          "description": "Build date of the NFC Analysis Platform",
          "type": "string",
          "format": "date-time"
        },
        "go_version": {
          "description": "Go version used to build the NFC Analysis Platform",
          "type": "string"
        },
        "os": {
          "description": "Operating system",
          "type": "string"
        },
        "version": {
          "description": "Version of the NFC Analysis Platform",
          "type": "string"
        }
      }
    },
    "TlvExtractRequest": {
      "type": "object",
      "required": [
        "hex_data"
      ],
      "properties": {
        "data_type": {
          "description": "Data type for display",
          "type": "string",
          "default": "hex",
          "enum": [
            "hex",
            "utf8",
            "ascii",
            "numeric"
          ]
        },
        "hex_data": {
          "description": "Hex TLV data to parse",
          "type": "string"
        },
        "tags": {
          "description": "Tags to extract",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "TlvExtractResult": {
      "type": "object",
      "properties": {
        "values": {
          "description": "Extracted values (tag -\u003e value)",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "TlvItem": {
      "type": "object",
      "properties": {
        "children": {
          "description": "Child TLV items (if constructed)",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TlvItem"
          }
        },
        "is_constructed": {
          "description": "Whether the tag is constructed",
          "type": "boolean"
        },
        "length": {
          "description": "Length",
          "type": "integer"
        },
        "tag": {
          "description": "Tag",
          "type": "string"
        },
        "value": {
          "description": "Value (hex encoded)",
          "type": "string"
        }
      }
    },
    "TlvParseRequest": {
      "type": "object",
      "required": [
        "hex_data"
      ],
      "properties": {
        "hex_data": {
          "description": "Hex TLV data to parse",
          "type": "string"
        }
      }
    },
    "TlvParseResult": {
      "type": "object",
      "properties": {
        "structure": {
          "description": "Parsed TLV structure",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TlvItem"
          }
        }
      }
    }
  },
  "tags": [
    {
      "description": "APDU Response Decoder operations",
      "name": "nard"
    },
    {
      "description": "TLV Parser operations",
      "name": "tlv"
    },
    {
      "description": "System operations",
      "name": "system"
    }
  ]
}`))
}
