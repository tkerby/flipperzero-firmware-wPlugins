// Code generated by go-swagger; DO NOT EDIT.

package nard

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetFlipperFileContentParams creates a new GetFlipperFileContentParams object
// with the default values initialized.
func NewGetFlipperFileContentParams() GetFlipperFileContentParams {

	var (
		// initialize parameters with default values

		useSerialDefault = bool(false)
	)

	return GetFlipperFileContentParams{
		UseSerial: &useSerialDefault,
	}
}

// GetFlipperFileContentParams contains all the bound params for the get flipper file content operation
// typically these are obtained from a http.Request
//
// swagger:parameters getFlipperFileContent
type GetFlipperFileContentParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Path to the Flipper Zero device
	  In: query
	*/
	DevicePath *string
	/*ID of the .apdures file
	  Required: true
	  In: path
	*/
	FileID string
	/*Serial port for Flipper Zero communication
	  In: query
	*/
	SerialPort *string
	/*Whether to use serial communication
	  In: query
	  Default: false
	*/
	UseSerial *bool
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetFlipperFileContentParams() beforehand.
func (o *GetFlipperFileContentParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qDevicePath, qhkDevicePath, _ := qs.GetOK("device_path")
	if err := o.bindDevicePath(qDevicePath, qhkDevicePath, route.Formats); err != nil {
		res = append(res, err)
	}

	rFileID, rhkFileID, _ := route.Params.GetOK("file_id")
	if err := o.bindFileID(rFileID, rhkFileID, route.Formats); err != nil {
		res = append(res, err)
	}

	qSerialPort, qhkSerialPort, _ := qs.GetOK("serial_port")
	if err := o.bindSerialPort(qSerialPort, qhkSerialPort, route.Formats); err != nil {
		res = append(res, err)
	}

	qUseSerial, qhkUseSerial, _ := qs.GetOK("use_serial")
	if err := o.bindUseSerial(qUseSerial, qhkUseSerial, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindDevicePath binds and validates parameter DevicePath from query.
func (o *GetFlipperFileContentParams) bindDevicePath(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.DevicePath = &raw

	return nil
}

// bindFileID binds and validates parameter FileID from path.
func (o *GetFlipperFileContentParams) bindFileID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route
	o.FileID = raw

	return nil
}

// bindSerialPort binds and validates parameter SerialPort from query.
func (o *GetFlipperFileContentParams) bindSerialPort(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.SerialPort = &raw

	return nil
}

// bindUseSerial binds and validates parameter UseSerial from query.
func (o *GetFlipperFileContentParams) bindUseSerial(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewGetFlipperFileContentParams()
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("use_serial", "query", "bool", raw)
	}
	o.UseSerial = &value

	return nil
}
