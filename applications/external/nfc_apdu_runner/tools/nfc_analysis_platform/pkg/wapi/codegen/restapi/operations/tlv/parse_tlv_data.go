// Code generated by go-swagger; DO NOT EDIT.

package tlv

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ParseTlvDataHandlerFunc turns a function with the right signature into a parse tlv data handler
type ParseTlvDataHandlerFunc func(ParseTlvDataParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ParseTlvDataHandlerFunc) Handle(params ParseTlvDataParams) middleware.Responder {
	return fn(params)
}

// ParseTlvDataHandler interface for that can handle valid parse tlv data params
type ParseTlvDataHandler interface {
	Handle(ParseTlvDataParams) middleware.Responder
}

// NewParseTlvData creates a new http.Handler for the parse tlv data operation
func NewParseTlvData(ctx *middleware.Context, handler ParseTlvDataHandler) *ParseTlvData {
	return &ParseTlvData{Context: ctx, Handler: handler}
}

/*
	ParseTlvData swagger:route POST /tlv/parse tlv parseTlvData

# Parse TLV data

Parses TLV data and returns the structure
*/
type ParseTlvData struct {
	Context *middleware.Context
	Handler ParseTlvDataHandler
}

func (o *ParseTlvData) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewParseTlvDataParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
