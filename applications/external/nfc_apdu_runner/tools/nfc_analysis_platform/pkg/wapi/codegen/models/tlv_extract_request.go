// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TlvExtractRequest tlv extract request
//
// swagger:model TlvExtractRequest
type TlvExtractRequest struct {

	// Data type for display
	// Enum: ["hex","utf8","ascii","numeric"]
	DataType *string `json:"data_type,omitempty"`

	// Hex TLV data to parse
	// Required: true
	HexData *string `json:"hex_data"`

	// Tags to extract
	Tags []string `json:"tags"`
}

// Validate validates this tlv extract request
func (m *TlvExtractRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDataType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHexData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var tlvExtractRequestTypeDataTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["hex","utf8","ascii","numeric"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tlvExtractRequestTypeDataTypePropEnum = append(tlvExtractRequestTypeDataTypePropEnum, v)
	}
}

const (

	// TlvExtractRequestDataTypeHex captures enum value "hex"
	TlvExtractRequestDataTypeHex string = "hex"

	// TlvExtractRequestDataTypeUTF8 captures enum value "utf8"
	TlvExtractRequestDataTypeUTF8 string = "utf8"

	// TlvExtractRequestDataTypeASCII captures enum value "ascii"
	TlvExtractRequestDataTypeASCII string = "ascii"

	// TlvExtractRequestDataTypeNumeric captures enum value "numeric"
	TlvExtractRequestDataTypeNumeric string = "numeric"
)

// prop value enum
func (m *TlvExtractRequest) validateDataTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, tlvExtractRequestTypeDataTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TlvExtractRequest) validateDataType(formats strfmt.Registry) error {
	if swag.IsZero(m.DataType) { // not required
		return nil
	}

	// value enum
	if err := m.validateDataTypeEnum("data_type", "body", *m.DataType); err != nil {
		return err
	}

	return nil
}

func (m *TlvExtractRequest) validateHexData(formats strfmt.Registry) error {

	if err := validate.Required("hex_data", "body", m.HexData); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this tlv extract request based on context it is used
func (m *TlvExtractRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TlvExtractRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TlvExtractRequest) UnmarshalBinary(b []byte) error {
	var res TlvExtractRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
