// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"
	"github.com/go-openapi/spec"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/spensercai/nfc_apdu_runner/tools/nfc_analysis_platform/pkg/wapi/codegen/restapi/operations/nard"
	"github.com/spensercai/nfc_apdu_runner/tools/nfc_analysis_platform/pkg/wapi/codegen/restapi/operations/system"
	"github.com/spensercai/nfc_apdu_runner/tools/nfc_analysis_platform/pkg/wapi/codegen/restapi/operations/tlv"
)

// NewNfcAnalysisPlatformAPI creates a new NfcAnalysisPlatform instance
func NewNfcAnalysisPlatformAPI(spec *loads.Document) *NfcAnalysisPlatformAPI {
	return &NfcAnalysisPlatformAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		PreServerShutdown:   func() {},
		ServerShutdown:      func() {},
		spec:                spec,
		useSwaggerUI:        false,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,

		JSONConsumer: runtime.JSONConsumer(),

		JSONProducer: runtime.JSONProducer(),

		NardDecodeApduResponseHandler: nard.DecodeApduResponseHandlerFunc(func(params nard.DecodeApduResponseParams) middleware.Responder {
			return middleware.NotImplemented("operation nard.DecodeApduResponse has not yet been implemented")
		}),
		TlvExtractTlvValuesHandler: tlv.ExtractTlvValuesHandlerFunc(func(params tlv.ExtractTlvValuesParams) middleware.Responder {
			return middleware.NotImplemented("operation tlv.ExtractTlvValues has not yet been implemented")
		}),
		NardGetFlipperDevicesHandler: nard.GetFlipperDevicesHandlerFunc(func(params nard.GetFlipperDevicesParams) middleware.Responder {
			return middleware.NotImplemented("operation nard.GetFlipperDevices has not yet been implemented")
		}),
		NardGetFlipperFileContentHandler: nard.GetFlipperFileContentHandlerFunc(func(params nard.GetFlipperFileContentParams) middleware.Responder {
			return middleware.NotImplemented("operation nard.GetFlipperFileContent has not yet been implemented")
		}),
		NardGetFlipperFilesHandler: nard.GetFlipperFilesHandlerFunc(func(params nard.GetFlipperFilesParams) middleware.Responder {
			return middleware.NotImplemented("operation nard.GetFlipperFiles has not yet been implemented")
		}),
		NardGetFormatTemplateContentHandler: nard.GetFormatTemplateContentHandlerFunc(func(params nard.GetFormatTemplateContentParams) middleware.Responder {
			return middleware.NotImplemented("operation nard.GetFormatTemplateContent has not yet been implemented")
		}),
		NardGetFormatTemplatesHandler: nard.GetFormatTemplatesHandlerFunc(func(params nard.GetFormatTemplatesParams) middleware.Responder {
			return middleware.NotImplemented("operation nard.GetFormatTemplates has not yet been implemented")
		}),
		SystemGetSystemInfoHandler: system.GetSystemInfoHandlerFunc(func(params system.GetSystemInfoParams) middleware.Responder {
			return middleware.NotImplemented("operation system.GetSystemInfo has not yet been implemented")
		}),
		TlvParseTlvDataHandler: tlv.ParseTlvDataHandlerFunc(func(params tlv.ParseTlvDataParams) middleware.Responder {
			return middleware.NotImplemented("operation tlv.ParseTlvData has not yet been implemented")
		}),
	}
}

/*NfcAnalysisPlatformAPI API for NFC Analysis Platform */
type NfcAnalysisPlatformAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler
	useSwaggerUI    bool

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator

	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator

	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for the following mime types:
	//   - application/json
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for the following mime types:
	//   - application/json
	JSONProducer runtime.Producer

	// NardDecodeApduResponseHandler sets the operation handler for the decode apdu response operation
	NardDecodeApduResponseHandler nard.DecodeApduResponseHandler
	// TlvExtractTlvValuesHandler sets the operation handler for the extract tlv values operation
	TlvExtractTlvValuesHandler tlv.ExtractTlvValuesHandler
	// NardGetFlipperDevicesHandler sets the operation handler for the get flipper devices operation
	NardGetFlipperDevicesHandler nard.GetFlipperDevicesHandler
	// NardGetFlipperFileContentHandler sets the operation handler for the get flipper file content operation
	NardGetFlipperFileContentHandler nard.GetFlipperFileContentHandler
	// NardGetFlipperFilesHandler sets the operation handler for the get flipper files operation
	NardGetFlipperFilesHandler nard.GetFlipperFilesHandler
	// NardGetFormatTemplateContentHandler sets the operation handler for the get format template content operation
	NardGetFormatTemplateContentHandler nard.GetFormatTemplateContentHandler
	// NardGetFormatTemplatesHandler sets the operation handler for the get format templates operation
	NardGetFormatTemplatesHandler nard.GetFormatTemplatesHandler
	// SystemGetSystemInfoHandler sets the operation handler for the get system info operation
	SystemGetSystemInfoHandler system.GetSystemInfoHandler
	// TlvParseTlvDataHandler sets the operation handler for the parse tlv data operation
	TlvParseTlvDataHandler tlv.ParseTlvDataHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// PreServerShutdown is called before the HTTP(S) server is shutdown
	// This allows for custom functions to get executed before the HTTP(S) server stops accepting traffic
	PreServerShutdown func()

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// UseRedoc for documentation at /docs
func (o *NfcAnalysisPlatformAPI) UseRedoc() {
	o.useSwaggerUI = false
}

// UseSwaggerUI for documentation at /docs
func (o *NfcAnalysisPlatformAPI) UseSwaggerUI() {
	o.useSwaggerUI = true
}

// SetDefaultProduces sets the default produces media type
func (o *NfcAnalysisPlatformAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *NfcAnalysisPlatformAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *NfcAnalysisPlatformAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *NfcAnalysisPlatformAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *NfcAnalysisPlatformAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *NfcAnalysisPlatformAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *NfcAnalysisPlatformAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the NfcAnalysisPlatformAPI
func (o *NfcAnalysisPlatformAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.NardDecodeApduResponseHandler == nil {
		unregistered = append(unregistered, "nard.DecodeApduResponseHandler")
	}
	if o.TlvExtractTlvValuesHandler == nil {
		unregistered = append(unregistered, "tlv.ExtractTlvValuesHandler")
	}
	if o.NardGetFlipperDevicesHandler == nil {
		unregistered = append(unregistered, "nard.GetFlipperDevicesHandler")
	}
	if o.NardGetFlipperFileContentHandler == nil {
		unregistered = append(unregistered, "nard.GetFlipperFileContentHandler")
	}
	if o.NardGetFlipperFilesHandler == nil {
		unregistered = append(unregistered, "nard.GetFlipperFilesHandler")
	}
	if o.NardGetFormatTemplateContentHandler == nil {
		unregistered = append(unregistered, "nard.GetFormatTemplateContentHandler")
	}
	if o.NardGetFormatTemplatesHandler == nil {
		unregistered = append(unregistered, "nard.GetFormatTemplatesHandler")
	}
	if o.SystemGetSystemInfoHandler == nil {
		unregistered = append(unregistered, "system.GetSystemInfoHandler")
	}
	if o.TlvParseTlvDataHandler == nil {
		unregistered = append(unregistered, "tlv.ParseTlvDataHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *NfcAnalysisPlatformAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *NfcAnalysisPlatformAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {
	return nil
}

// Authorizer returns the registered authorizer
func (o *NfcAnalysisPlatformAPI) Authorizer() runtime.Authorizer {
	return nil
}

// ConsumersFor gets the consumers for the specified media types.
// MIME type parameters are ignored here.
func (o *NfcAnalysisPlatformAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {
	result := make(map[string]runtime.Consumer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONConsumer
		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result
}

// ProducersFor gets the producers for the specified media types.
// MIME type parameters are ignored here.
func (o *NfcAnalysisPlatformAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {
	result := make(map[string]runtime.Producer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONProducer
		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result
}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *NfcAnalysisPlatformAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the nfc analysis platform API
func (o *NfcAnalysisPlatformAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *NfcAnalysisPlatformAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened
	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/nard/decode"] = nard.NewDecodeApduResponse(o.context, o.NardDecodeApduResponseHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/tlv/extract"] = tlv.NewExtractTlvValues(o.context, o.TlvExtractTlvValuesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/nard/flipper/devices"] = nard.NewGetFlipperDevices(o.context, o.NardGetFlipperDevicesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/nard/flipper/files/{file_id}"] = nard.NewGetFlipperFileContent(o.context, o.NardGetFlipperFileContentHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/nard/flipper/files"] = nard.NewGetFlipperFiles(o.context, o.NardGetFlipperFilesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/nard/formats/{format_id}"] = nard.NewGetFormatTemplateContent(o.context, o.NardGetFormatTemplateContentHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/nard/formats"] = nard.NewGetFormatTemplates(o.context, o.NardGetFormatTemplatesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/system/info"] = system.NewGetSystemInfo(o.context, o.SystemGetSystemInfoHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/tlv/parse"] = tlv.NewParseTlvData(o.context, o.TlvParseTlvDataHandler)
}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *NfcAnalysisPlatformAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	if o.useSwaggerUI {
		return o.context.APIHandlerSwaggerUI(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *NfcAnalysisPlatformAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *NfcAnalysisPlatformAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *NfcAnalysisPlatformAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}

// AddMiddlewareFor adds a http middleware to existing handler
func (o *NfcAnalysisPlatformAPI) AddMiddlewareFor(method, path string, builder middleware.Builder) {
	um := strings.ToUpper(method)
	if path == "/" {
		path = ""
	}
	o.Init()
	if h, ok := o.handlers[um][path]; ok {
		o.handlers[um][path] = builder(h)
	}
}
