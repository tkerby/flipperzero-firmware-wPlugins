// Code generated by go-swagger; DO NOT EDIT.

package tlv

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ExtractTlvValuesHandlerFunc turns a function with the right signature into a extract tlv values handler
type ExtractTlvValuesHandlerFunc func(ExtractTlvValuesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ExtractTlvValuesHandlerFunc) Handle(params ExtractTlvValuesParams) middleware.Responder {
	return fn(params)
}

// ExtractTlvValuesHandler interface for that can handle valid extract tlv values params
type ExtractTlvValuesHandler interface {
	Handle(ExtractTlvValuesParams) middleware.Responder
}

// NewExtractTlvValues creates a new http.Handler for the extract tlv values operation
func NewExtractTlvValues(ctx *middleware.Context, handler ExtractTlvValuesHandler) *ExtractTlvValues {
	return &ExtractTlvValues{Context: ctx, Handler: handler}
}

/*
	ExtractTlvValues swagger:route POST /tlv/extract tlv extractTlvValues

# Extract values from TLV data

Extracts values for specified tags from TLV data
*/
type ExtractTlvValues struct {
	Context *middleware.Context
	Handler ExtractTlvValuesHandler
}

func (o *ExtractTlvValues) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewExtractTlvValuesParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
