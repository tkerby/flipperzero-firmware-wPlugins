// Code generated by go-swagger; DO NOT EDIT.

package nard

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetFormatTemplateContentHandlerFunc turns a function with the right signature into a get format template content handler
type GetFormatTemplateContentHandlerFunc func(GetFormatTemplateContentParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetFormatTemplateContentHandlerFunc) Handle(params GetFormatTemplateContentParams) middleware.Responder {
	return fn(params)
}

// GetFormatTemplateContentHandler interface for that can handle valid get format template content params
type GetFormatTemplateContentHandler interface {
	Handle(GetFormatTemplateContentParams) middleware.Responder
}

// NewGetFormatTemplateContent creates a new http.Handler for the get format template content operation
func NewGetFormatTemplateContent(ctx *middleware.Context, handler GetFormatTemplateContentHandler) *GetFormatTemplateContent {
	return &GetFormatTemplateContent{Context: ctx, Handler: handler}
}

/*
	GetFormatTemplateContent swagger:route GET /nard/formats/{format_id} nard getFormatTemplateContent

# Get format template content

Returns the content of a specific format template
*/
type GetFormatTemplateContent struct {
	Context *middleware.Context
	Handler GetFormatTemplateContentHandler
}

func (o *GetFormatTemplateContent) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetFormatTemplateContentParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
