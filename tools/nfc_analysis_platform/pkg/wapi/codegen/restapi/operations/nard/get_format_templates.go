// Code generated by go-swagger; DO NOT EDIT.

package nard

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetFormatTemplatesHandlerFunc turns a function with the right signature into a get format templates handler
type GetFormatTemplatesHandlerFunc func(GetFormatTemplatesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetFormatTemplatesHandlerFunc) Handle(params GetFormatTemplatesParams) middleware.Responder {
	return fn(params)
}

// GetFormatTemplatesHandler interface for that can handle valid get format templates params
type GetFormatTemplatesHandler interface {
	Handle(GetFormatTemplatesParams) middleware.Responder
}

// NewGetFormatTemplates creates a new http.Handler for the get format templates operation
func NewGetFormatTemplates(ctx *middleware.Context, handler GetFormatTemplatesHandler) *GetFormatTemplates {
	return &GetFormatTemplates{Context: ctx, Handler: handler}
}

/*
	GetFormatTemplates swagger:route GET /nard/formats nard getFormatTemplates

# Get available format templates

Returns a list of available .apdufmt format templates
*/
type GetFormatTemplates struct {
	Context *middleware.Context
	Handler GetFormatTemplatesHandler
}

func (o *GetFormatTemplates) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetFormatTemplatesParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
