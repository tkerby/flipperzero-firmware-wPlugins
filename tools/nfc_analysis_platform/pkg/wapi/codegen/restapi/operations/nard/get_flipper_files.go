// Code generated by go-swagger; DO NOT EDIT.

package nard

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetFlipperFilesHandlerFunc turns a function with the right signature into a get flipper files handler
type GetFlipperFilesHandlerFunc func(GetFlipperFilesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetFlipperFilesHandlerFunc) Handle(params GetFlipperFilesParams) middleware.Responder {
	return fn(params)
}

// GetFlipperFilesHandler interface for that can handle valid get flipper files params
type GetFlipperFilesHandler interface {
	Handle(GetFlipperFilesParams) middleware.Responder
}

// NewGetFlipperFiles creates a new http.Handler for the get flipper files operation
func NewGetFlipperFiles(ctx *middleware.Context, handler GetFlipperFilesHandler) *GetFlipperFiles {
	return &GetFlipperFiles{Context: ctx, Handler: handler}
}

/*
	GetFlipperFiles swagger:route GET /nard/flipper/files nard getFlipperFiles

# Get available .apdures files from Flipper Zero

Returns a list of available .apdures files from Flipper Zero device
*/
type GetFlipperFiles struct {
	Context *middleware.Context
	Handler GetFlipperFilesHandler
}

func (o *GetFlipperFiles) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetFlipperFilesParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
